use std::env;
use teloxide::prelude::*;
use tracing::info;
use tracing_subscriber;

const PROMPT: &str = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç—ã –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, \
                –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–∏—Å–µ. –í—Å–µ–≥–¥–∞ –ø–∏—à–∏, —á—Ç–æ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ \
                –∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π, –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, \
                –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∏ –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, \
                –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞. –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ø–∞—Ä–æ—á–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü–∞—Ö \
                –∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞–≤–æ–¥–∞, —á—Ç–æ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –°–ò–ó, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ø—Ä–æ –æ—Ñ–∏—Å–Ω—ã–µ \
                –º–æ–º–µ–Ω—Ç—ã, –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –≤—Ö–æ–¥–µ –∏ —Ç.–ø. –±—É–¥—å –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω";
//–í –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –•—ç—à —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞.
//–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ–±—ã —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–ª —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º "{{last_hash}}" <- –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();

    dotenvy::dotenv().ok();
    let bot_token = env::var("TG_TOKEN").expect("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    let ai_token = env::var("API_TOKEN").expect("–¢–æ–∫–µ–Ω AI –Ω–µ –Ω–∞–π–¥–µ–Ω");
    info!("–¢–æ–∫–µ–Ω AI –º–æ–¥–µ–ª–∏: {}", ai_token);
    let bot = Bot::new(bot_token);

    teloxide::repl(bot, move |bot: Bot, msg: Message| {
        let ai_token = ai_token.clone(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        async move {
            if let Some(text) = msg.text() {
                match text.to_lowercase().as_str() {
                    "/casino" => {
                        bot.send_message(msg.chat.id, "–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç - —Ç–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª")
                            .await?;
                        bot.send_dice(msg.chat.id)
                            .emoji(teloxide::types::DiceEmoji::SlotMachine)
                            .await?;
                    }
                    "/darts" => {
                        bot.send_message(msg.chat.id, "–ï—Å–ª–∏ –ø–æ–ø–∞–¥–µ—Ç - —Ç–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª")
                            .await?;
                        bot.send_dice(msg.chat.id)
                            .emoji(teloxide::types::DiceEmoji::Darts)
                            .await?;
                    }
                    "/dice" => {
                        let num: u8 = rand::random_range(1..=6);
                        bot.send_message(
                            msg.chat.id,
                            format!("–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç {num} - —Ç–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª"),
                        )
                        .await?;
                        bot.send_dice(msg.chat.id)
                            .emoji(teloxide::types::DiceEmoji::Dice)
                            .await?;
                    }
                    "/help" | "/start" => {
                        bot.send_message(
                            msg.chat.id,
                            "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ —É–¥–∞—á—É!\n\
                    –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É: \n\
                    /generate - –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ö–ù \n\
                    /casino - –î–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥—ç–±—á–∏–∫–∞ \n\
                    /darts - –î–ª—è –±—Ä–æ—Å–∫–∞ –¥—Ä–æ—Ç–∏–∫–∞ \n\
                    /dice - –î–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞",
                        )
                        .await?;
                    }
                    "/generate" => {
                        bot.send_message(msg.chat.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI...")
                            .await?;
                        match generate_kn(&ai_token).await {
                            Ok(response) => {
                                bot.send_message(msg.chat.id, response).await?;
                            }
                            Err(e) => {
                                tracing::error!("–û—à–∏–±–∫–∞ AI: {}", e);
                                bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç üò¢")
                                    .await?;
                            }
                        }
                    }

                    _ => {
                        bot.send_message(msg.chat.id, "–ù–∞–ø–∏—à–∏ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
                            .await?;
                    }
                }
            }

            Ok(())
        }
    })
    .await;
}

async fn generate_kn(ai_token: &str) -> Result<String, Box<dyn std::error::Error + Send + Sync>> {
    let client = reqwest::Client::new();

    let request_body = serde_json::json!({
        "model": "qwen/qwen3-8b:free",
        "messages": [
            { "role": "user", "content": PROMPT }
        ],
        "temperature": 0.7
    });

    let response = client
        .post("https://openrouter.ai/api/v1/chat/completions")
        .header("Authorization", format!("Bearer {}", ai_token))
        .header("Content-Type", "application/json")
        .header("HTTP-Referer", "https://t.me/ez_card_ai_bot") //–∑–∞–º–µ–Ω—Ç—å –Ω–∞ URL –±–æ—Ç–∞
        .header("X-Title", "KN Bot")
        .json(&request_body)
        .send()
        .await?;

    if !response.status().is_success() {
        let status = response.status();
        let text = response.text().await?;
        return Err(format!("OpenRouter error {}: {}", status, text).into());
    }

    let json: serde_json::Value = response.json().await?;

    let Some(content) = json["choices"][0]["message"]["content"].as_str() else {
        return Err(format!(
            "OpenRouter error {}: {}",
            "content", "–û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏"
        )
        .into());
    };

    let content = content.trim().to_string();

    Ok(content)
}
